AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  aws-s3-to-s3

  Sample SAM Template for aws-s3-to-s3

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Parameters:
  EnvironmentName:
    Description: An environment name that will be used as a suffix for resources
    Type: String
    Default: test
  VpcCIDR:
    Description: The IP range (CIDR notation) for this VPC
    Type: String
    Default: 13.37.0.0/16
  PrivateSubnetCIDR:
    Description: The IP range (CIDR notation) for the private subnet
    Type: String
    Default: 13.37.13.0/24

Resources:
  # The VPC for our Lambda function
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-${EnvironmentName}-VPC'

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnetCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VPC

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet

  # The Lambda function that copies between buckets and writes the metadata to our DB
  AWSS3FileUpload:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3_to_s3_copy/
      Handler: app.lambda_handler
      Runtime: python3.9
      VpcConfig:
        SecurityGroupIds:
          - !Ref NoIngressSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 's3:GetObject'
              Resource: 'arn:aws:s3:::source-bucket-dyslexicat/*'
            - Effect: Allow
              Action:
                - 's3:ListBucket'
              Resource: 'arn:aws:s3:::source-bucket-dyslexicat'
            - Effect: Allow
              Action:
                - 's3:PutObject'
                - 's3:GetObject'
              Resource: 'arn:aws:s3:::target-bucket-dyslexicat/*'
            - Effect: Allow
              Action:
                - 's3:ListBucket'
              Resource: 'arn:aws:s3:::target-bucket-dyslexicat'
      Architectures:
        - x86_64
      Events:
        FileUpload:
          Type: S3
          Properties:
            Bucket: !Ref SourceBucket
            Events: s3:ObjectCreated:*

  # Source S3 Bucket
  SourceBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "source-bucket-dyslexicat"

  # Target S3 Bucket
  TargetBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "target-bucket-dyslexicat"

